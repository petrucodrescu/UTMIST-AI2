"""
DO NOT EDIT THIS FILE AS A PARTICIPANT PLEASE
"""


import os
import pytest 
import skvideo
import skvideo.io
from loguru import logger
from IPython.display import Video
from environment.agent import UserInputAgent, ConstantAgent, run_match, CameraResolution
from user.my_agent import SubmittedAgent
from user.train_agent import gen_reward_manager

try:
    from server.api import create_participant, update_validation_status
except Exception:
    # Fallback: implement minimal Supabase helpers here so validation pipeline works even if server.api is unavailable
    from supabase import create_client

    def _get_sb_client():
        url = os.environ["SUPABASE_URL"]
        key = os.environ["SUPABASE_SERVICE_ROLE_KEY"]
        return create_client(url, key)

    def create_participant(username: str) -> None:
        client = _get_sb_client()
        existing = client.table("ai2_leaderboard").select("username").eq("username", username).execute()
        rows = []
        if hasattr(existing, "data") and isinstance(existing.data, list):
            rows = existing.data
        elif hasattr(existing, "data") and isinstance(existing.data, dict):
            rows = [existing.data]
        if rows:
            return
        client.table("ai2_leaderboard").insert({"username": username, "elo": 1000, "validation_status": False}).execute()

    def update_validation_status(username: str, status: bool) -> None:
        client = _get_sb_client()
        client.table("ai2_leaderboard").update({"validation_status": status}).eq("username", username).execute()

@pytest.mark.timeout(60) 
def test_agent_validation():
    username = os.getenv("USERNAME")
    create_participant(username)
    logger.info("Warming up your agent ...")
    my_agent = SubmittedAgent() 
    logger.info("Warming up your opponent's agent ...")
    opponent = ConstantAgent()
    match_time = 90
    reward_manager = gen_reward_manager()
    logger.info("Validation match has started ...")
    run_match(my_agent,
            agent_2=opponent,
            video_path=f'validate.mp4',
            agent_1_name='Agent 1',
            agent_2_name='Agent 2',
            resolution=CameraResolution.LOW,
            reward_manager=reward_manager,
            max_timesteps=30 * match_time,
            train_mode=True
            )
    update_validation_status(username, True)
    logger.info("Validation match has completed successfully! Your agent is ready for battle!")

